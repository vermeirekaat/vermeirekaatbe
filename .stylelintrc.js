const blockInlineValues = ["", "block", "inline"];
const xYValues = ["top", "right", "bottom", "left"];
const rowColumnValues = ["row", "column"];
const minMaxValues = ["", "min", "max"];

const startEndValues = ["", "start", "end"];

const borderValues = ["", "width", "style", "color"];

const combineProperty = (prefix, value, suffix) => {
  let string = "";
  if (prefix) string += prefix;
  if (prefix && value) string += "-";
  if (value) string += value;
  if ((value && suffix) || (prefix && suffix)) string += "-";
  if (suffix) string += suffix;
  return string;
};

const listProperties = (values, prefix, suffixes = [""], plural = false) => {
  if (!suffixes || !suffixes.length) suffixes = [""];
  return values
    .map((value) => {
      if (plural) value = `${value}s`;

      return suffixes.map((suffix) => {
        return combineProperty(prefix, value, suffix);
      });
    })
    .flat();
};

const positioning = () => {
  return [
    "position",
    ...listProperties(blockInlineValues, "inset", startEndValues),
    ...listProperties(xYValues),
    "isolation",
    "z-index",
  ];
};

const layoutContent = () => {
  return [
    "display",
    "grid",
    ...listProperties(rowColumnValues, "grid-template", [""], true),
    "grid-template-areas",
    "grid-auto-flow",
    ...listProperties(rowColumnValues, "grid-auto", [""], true),
    "masonry-auto-flow",
    "flex-flow",
    "flex-direction",
    "flex-wrap",
    "place-content",
    "justify-content",
    "align-content",
    "place-items",
    "justify-items",
    "align-items",
    "justify-tracks",
    "align-tracks",
    "gap",
    "row-gap",
    "column-gap",
    "float",
    "clear",
  ];
};

const layoutSelf = () => {
  return [
    "aspect-ratio",
    ...listProperties(minMaxValues, "block-size"),
    ...listProperties(minMaxValues, "inline-size"),
    ...listProperties(minMaxValues, "width"),
    ...listProperties(minMaxValues, "height"),
    ...listProperties(blockInlineValues, "margin", startEndValues),
    ...listProperties(xYValues, "margin"),
    ...listProperties(blockInlineValues, "padding", startEndValues),
    ...listProperties(xYValues, "padding"),
    "order",
    "grid-area",
    ...listProperties(rowColumnValues, "grid", startEndValues),
    "flex",
    "flex-grow",
    "flex-shrink",
    "flex-basis",
    "place-self",
    "justify-self",
    "align-self",
  ];
};

const typo = () => [
  "font",
  "font-family",
  "font-size",
  "font-size-adjust",
  "font-weight",
  "font-style",
  "font-stretch",
  "line-height",
  "line-height-step",
  "text-transform",
  "text-decoration",
  "text-decoration-line",
  "text-decoration-style",
  "text-decoration-color",
  "text-decoration-thickness",
  "text-decoration-skip",
  "text-decoration-skip-ink",
  "text-underline-offset",
  "text-underline-position",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "font-variation-settings",
  "text-align",
  "text-align-last",
  "text-indent",
  "text-justify",
  "vertical-align",
  "columns",
  "column-count",
  "column-width",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "word-spacing",
  "writing-mode",
  "text-orientation",
  "text-combine-upright",
  "font-language-override",
  "font-variant",
  "font-variant-alternates",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-feature-settings",
  "font-kerning",
  "font-synthesis",
  "text-size-adjust",
  "font-optical-sizing",
  "text-rendering",
  "unicode-bidi",
  "quotes",
  "color",
  "-webkit-text-fill-color",
  "-webkit-text-stroke",
  "-webkit-text-stroke-color",
  "-webkit-text-stroke-width",
  "caret-color",
  "text-shadow",
  "letter-spacing",
  "list-style",
  "list-style-type",
  "list-style-image",
  "list-style-position",
  "tab-size",
  "text-overflow",
  "word-break",
  "-webkit-line-clamp",
  "line-break",
  "user-select",
  "hyphens",
  "hyphenate-character",
  "line-break",
  "initial-letter",
  "initial-letter-align",
  "widows",
  "orphans",
  "hanging-punctuation",
  "math-depth",
  "math-shift",
  "math-style",
  "paint-order",
];

const visualBase = () => [
  "background",
  "background-color",
  "background-image",
  "background-size",
  "background-position",
  "background-position-x",
  "background-position-y",
  "background-origin",
  "background-repeat",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  ...listProperties(borderValues, "border", [""]),
  ...listProperties(
    listProperties(blockInlineValues.slice(1), "border", startEndValues),
    "",
    borderValues
  ),
  ...listProperties(xYValues, "border", borderValues),
  "border-radius",
  "border-start-start-radius",
  "border-start-end-radius",
  "border-end-start-radius",
  "border-end-end-radius",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-image",
  "border-image-source",
  "border-image-slice",
  "border-image-width",
  "border-image-outset",
  "border-image-repeat",
  "outline",
  "outline-width",
  "outline-style",
  "outline-color",
  "outline-offset",
  "box-shadow",
  "box-decoration-break",
];

const visualExtra = () => [
  ...listProperties(blockInlineValues, "overflow"),
  ...listProperties(["x", "y"], "overflow"),
  "overflow-anchor",
  "overflow-clip-margin",
  "overflow-wrap",
  "animation",
  "animation-duration",
  "animation-timing-function",
  "animation-delay",
  "animation-iteration-count",
  "animation-direction",
  "animation-fill-mode",
  "animation-play-state",
  "animation-name",
  "animation-composition",
  "animation-timeline",
  "mask",
  "mask-image",
  "mask-position",
  "mask-size",
  "mask-repeat",
  "mask-clip",
  "mask-origin",
  "mask-composite",
  "mask-type",
  "mask-mode",
  "mask-border",
  "mask-border-source",
  "mask-border-slice",
  "mask-border-width",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-mode",
  "object-fit",
  "object-position",
  "perspective",
  "perspective-origin",
  "clip-path",
  "filter",
  "backdrop-filter",
  "mix-blend-mode",
  "opacity",
  "transform-origin",
  "transform",
  "transform-box",
  "transform-style",
  "rotate",
  "scale",
  "translate",
  "offset",
  "offset-position",
  "offset-path",
  "offset-distance",
  "offset-anchor",
  "offset-rotate",
  "transition",
  "transition-property",
  "transition-duration",
  "transition-timing-function",
  "transition-delay",
  ...listProperties(blockInlineValues, "overscroll-behavior"),
  ...listProperties(["x", "y"], "overscroll-behavior"),
  "image-orientation",
  "image-rendering",
  "shape-outside",
  "shape-image-threshold",
  "shape-margin",
  "scrollbar-width",
  "scrollbar-gutter",
  "scrollbar-color",
];

const misc = () => [
  "table-layout",
  "border-collapse",
  "border-spacing",
  "empty-cells",
  "caption-side",
  "visibility",
  "content-visibility",
  "backface-visibility",
  "appearance",
  "cursor",
  "pointer-events",
  "accent-color",
  "break-inside",
  "break-before",
  "break-after",
  "page-break-inside",
  "page-break-before",
  "page-break-after",
  "contain",
  ...listProperties(blockInlineValues, "contain-intrinsic", ["size"]),
  ...listProperties(["width", "height"], "contain-intrinsic"),
  "scroll-behavior",
  ...listProperties(
    blockInlineValues.slice(1),
    "scroll-margin",
    startEndValues
  ),
  ...listProperties(xYValues, "scroll-margin"),
  ...listProperties(
    blockInlineValues.slice(1),
    "scroll-padding",
    startEndValues
  ),
  ...listProperties(xYValues, "scroll-padding"),
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scroll-timeline",
  "scroll-timeline-axis",
  "scroll-timeline-name",
  "color-scheme",
  "forced-color-adjust",
  "print-color-adjust",
  "image-resolution",
];

const propertyGroups = [
  ["all"],
  ["box-sizing"],
  ["direction"],
  ["counter-reset"],
  ["counter-set"],
  ["counter-increment"],
  ["content"],
  ["resize"],
  positioning(),
  layoutContent(),
  layoutSelf(),
  typo(),
  visualBase(),
  visualExtra(),
  misc(),
];

const propertiesOrder = propertyGroups.map((properties) => ({
  noEmptyLineBetween: true,
  emptyLineBefore: "threshold",
  properties,
}));

module.exports = {
  plugins: ["stylelint-scss", "stylelint-order"],
  extends: "stylelint-config-standard-scss",
  ignoreFiles: [
    "./styles/_variables.scss",
    "./styles/_fonts.scss",
    "./styles/_globals.scss"
  ],
  rules: {
    "at-rule-empty-line-before": [
      "always",
      {
        ignore: [
          "first-nested",
          "blockless-after-same-name-blockless",
          "after-comment",
        ],
        severity: "warning",
      },
    ],
    "at-rule-no-unknown": null,
    "block-no-empty": true,
    "color-named": "always-where-possible",
    "color-no-invalid-hex": true,
    "comment-no-empty": true,
    // "declaration-bang-space-before": "always",
    "declaration-block-no-duplicate-properties": [
      true,
      {
        ignore: ["consecutive-duplicates-with-different-values"],
      },
    ],
    "declaration-block-no-shorthand-property-overrides": true,
    "declaration-empty-line-before": [
      "always",
      {
        except: ["first-nested"],
        ignore: [
          "after-declaration",
          "after-comment",
          "inside-single-line-block",
        ],
        severity: "warning",
      },
    ],
    "declaration-property-unit-allowed-list": {
      "/^padding|^margin|^border/": ["rem", "vw", "vh"],
    },
    "font-family-no-duplicate-names": true,
    "font-family-no-missing-generic-family-keyword": true,
    "function-calc-no-unspaced-operator": true,
    "function-linear-gradient-no-nonstandard-direction": true,
    "keyframe-declaration-no-important": true,
    "max-nesting-depth": 3,
    "media-feature-name-no-unknown": true,
    "no-descending-specificity": null,
    "no-duplicate-at-import-rules": true,
    "no-duplicate-selectors": true,
    "no-empty-source": true,
    "no-invalid-double-slash-comments": true,
    "no-irregular-whitespace": null,
    "property-no-unknown": true,
    "scss/at-extend-no-missing-placeholder": null,
    "scss/dollar-variable-pattern": [
      "^([_a-z][a-z0-9]*)(-[a-z0-9]+)*$",
      {
        message: "Expected variable name to be kebab-case",
      },
    ],
    "scss/double-slash-comment-whitespace-inside": null,
    "scss/no-global-function-names": null,
    "selector-class-pattern": null,
    "selector-pseudo-class-no-unknown": true,
    "selector-pseudo-element-no-unknown": true,
    "selector-type-no-unknown": true,
    // "string-quotes": "single",
    "string-no-newline": true,
    "unit-allowed-list": ["%", "deg", "px", "rem", "vw", "vh", "s"],
    "unit-no-unknown": true,
    "order/order": [
      {
        type: "at-rule",
        name: "extend",
      },
      {
        type: "at-rule",
        name: "include",
        hasBlock: false,
      },
      "dollar-variables",
      "custom-properties",
      "declarations",
      "rules",
      "at-rules",
    ],
    "order/properties-order": [
      propertiesOrder,
      {
        severity: "warning",
        unspecified: "bottomAlphabetical",
        emptyLineBeforeUnspecified: "always",
        emptyLineMinimumPropertyThreshold: 5,
      },
    ],
  },
};
